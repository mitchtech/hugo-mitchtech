<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arduino on Mitchtech</title>
    <link>https://mitchtech.github.io/hugo-mitchtech/tags/arduino/</link>
    <description>Recent content in Arduino on Mitchtech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](//gohugo.io). Theme by [PPOffice](http://github.com/ppoffice).</copyright>
    <lastBuildDate>Sat, 11 Aug 2012 11:35:53 +0000</lastBuildDate>
    
	<atom:link href="https://mitchtech.github.io/hugo-mitchtech/tags/arduino/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Raspberry Pi &#43; Arduino &#43; SPI</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/raspberry-pi-arduino-spi/</link>
      <pubDate>Sat, 11 Aug 2012 11:35:53 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/raspberry-pi-arduino-spi/</guid>
      <description>This tutorial will show you how to communicate from your raspberry pi to your arduino using 3-wire SPI.
Requirements  1 Raspberry pi (running Raspbian)
 1 Arduino
 4 wires
  Your raspberry pi should be running the newest version of Raspbian. To ensure your system is up-to-date please download and run rpi-update.
Wiring 
Arduino Open your Arduino ide and flash the below code to your Arduino.</description>
    </item>
    
    <item>
      <title>Arduino Poor Man&#39;s Oscilloscope</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/arduino-oscilloscope/</link>
      <pubDate>Mon, 06 Aug 2012 04:33:51 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/arduino-oscilloscope/</guid>
      <description>This tutorial will show you how to use your Arduino as an oscilloscope. We end the tutorial with a verification portion that uses the Arduino to generate a square wave, requiring a single wire.
lxardoscope Lxardoscope is another Arduino + real-time graphing project that has the potential to turn an Arduino into an oscilloscope. Unfortunately, I was unable to get any readings (the visual graph remained static).
Poor Man&amp;rsquo;s Oscilloscope First, download processing.</description>
    </item>
    
    <item>
      <title>MSP430 Launchpad &#43; PWM</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/msp430-launchpad-pwm/</link>
      <pubDate>Mon, 09 Jul 2012 23:06:03 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/msp430-launchpad-pwm/</guid>
      <description>Inspired by this tutorial.
The following tutorial will describe how perform pulse width modulation using a MSP430g2553 TI Launchpad to control a sparkfun servo motor.
Prerequisites Please see Cross-Compiling for TI MSP430 Launchpad to setup your development environment.
Hardware  Servo motor
 MSP430
 Power
  I&amp;rsquo;m using the Arduino to power the servo motors. Alternatively you may use USB, a wall plug, or a battery. The MSP430 is being used to generate the PWM for control.</description>
    </item>
    
    <item>
      <title>Arduino Physical CPU Gauges</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/arduino-physical-cpu-gauges/</link>
      <pubDate>Tue, 03 Jul 2012 14:46:30 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/arduino-physical-cpu-gauges/</guid>
      <description>Use Arduino and two hobby servos to control physical servo gauges for cpu activity, memory usage, bandwidth, and more. The script uses the python psutil and pyserial modules. The psutil module provides an interface for retrieving information on all running processes and system utilization (CPU, disk, memory, network) providing service similar to command line tools such as ps, top, iostat, and netstat. The servo control portion of the project is based on Arduino-Python 4-Axis Servo Controlby Brian Wendt, and the Arduino sketch is essentially unmodified from the SerialServoControl Sketch on Sparkfun.</description>
    </item>
    
    <item>
      <title>Arduino USB HID Keyboard</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/arduino-usb-hid-keyboard/</link>
      <pubDate>Sun, 24 Jun 2012 15:09:36 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/arduino-usb-hid-keyboard/</guid>
      <description>Turn your Arduino UNO into a USB HID keyboard, and make buttons that do whatever you want. Make it a useful tool, with new buttons for Cut/Copy/Paste or Volume+/Volume-/Mute, or annoy your friends and colleagues by setting the keyboard to perform random keypress after random delays!
  The USB HID keyboard conforms to the standard USB specification, so is functional on all modern operating systems. All this is made possible by the use of the Arduino Device Firmware Update (DFU) function.</description>
    </item>
    
    <item>
      <title>Arduino on Raspberry Pi</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/arduino-on-raspberry-pi/</link>
      <pubDate>Fri, 15 Jun 2012 00:00:55 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/arduino-on-raspberry-pi/</guid>
      <description>Connecting an Arduino to a Raspberry Pi is simple. In a terminal, install the Arduino IDE:
sudo apt-get install arduino  This will take a while to download and install all of the dependencies. Once completed, you can start the IDE from the terminal:
arduino  Or, from the LXDE menu, Electronics-&amp;gt;Arduino IDE. Note: This is IDE version 0018, and does not seem to recognize boards newer then the Duemilanove.</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Temperature &#43; Light</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-temperature-light/</link>
      <pubDate>Wed, 02 May 2012 04:41:37 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-temperature-light/</guid>
      <description>Sensing temperature and light with Android and Arduino. This article will demonstrate a basic thermometer / ambient light level detection input accessory.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output
Hardware Parts needed:  Android Device (1.6+)
 Photocell
 10K ohm resistor
 TMP36 temperature sensor</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Pan Tilt LEDs</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-pan-tilt-leds/</link>
      <pubDate>Wed, 02 May 2012 04:40:30 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-pan-tilt-leds/</guid>
      <description>Combining analog and digital outputs with Android and Arduino. This tutorial will demonstrate the basics for using two servos to achieve basic basic pan and tilt functionality. In addition, digital control is demonstrated using two LEDs.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output
Hardware Parts needed:  Android Device (1.</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Serial 4 digit LED</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-serial-4-digit-led/</link>
      <pubDate>Wed, 02 May 2012 04:39:18 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-serial-4-digit-led/</guid>
      <description>Interfacing a serial display with Android and Arduino. This article will demonstrate communication of a serial 7 segment display, specifically this one: 7-Segment Serial Display – Blue from Sparkfun electronics. The fancy wheel scroller is based on the android-wheel widget from yuri kanivets.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Swivel Head Android with LEDs</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-swivel-head-android-with-leds/</link>
      <pubDate>Wed, 02 May 2012 04:38:09 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-swivel-head-android-with-leds/</guid>
      <description>Combining analog and digital outputs with Android and Arduino. This tutorial will demonstrate the basic use of combined digital and analog outputs. The basic hardware is a hobby servo and two LEDs inside of an Android figure. The servo allows Andy Android to rotate 180 degrees.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Combination Lock</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-combination-lock/</link>
      <pubDate>Wed, 02 May 2012 04:35:48 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-combination-lock/</guid>
      <description>A simple combination lock with Android and Arduino. The fancy wheel scroller is based on the android-wheel widget from yuri kanivets.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output
Hardware Parts needed:  Android Device (1.6+)
 Hobby servo
 Breadboard
 Power supply
 Hook-up wire</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; D-Pad</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-d-pad/</link>
      <pubDate>Wed, 02 May 2012 04:34:30 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-d-pad/</guid>
      <description>A simple controller for use as an Android directional pad input accessory. The Arduino based device uses four momentary push buttons to sense digital inputs for up, down, left, and right.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output
Hardware Parts needed:  Android Device (1.6+)</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Dual Analog Input</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-dual-analog-input/</link>
      <pubDate>Wed, 02 May 2012 04:32:30 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-dual-analog-input/</guid>
      <description>Dual analog input with Android and Arduino. This article will demonstrate a basic dual analog USB input accessory.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output
Hardware Parts needed:  Android Device (1.6+)
 2x Potentiometers
 Hook-up wire
 Android ADK Board*
 – OR –</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Sensor Graph</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-sensor-graph/</link>
      <pubDate>Wed, 02 May 2012 04:30:29 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-sensor-graph/</guid>
      <description>A simple app to visualize analog sensor input with Android and Arduino.
For additional background information on interfacing Android with the real world, check out my other introductory tutorials:
Simple Digital Input Simple Digital Output Simple Analog Input Simple Analog Output
Hardware Parts needed:  Android Device (1.6+)
 Potentiometer
 Breadboard
 Power supply
 Hook-up wire
 Android ADK Board*
 – OR –
 Arduino compatible and USB Host shield</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Simple Analog Input</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-analog-input/</link>
      <pubDate>Wed, 02 May 2012 03:13:18 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-analog-input/</guid>
      <description>Simplest possible analog input with the ADK. This article will discuss the bare minimal requirements for development of a basic USB input accessory. The goal is to demonstrate the easiest possible use of the technology. For additional background information on Android development, Arduino, and MicroBridge, check out these links:
Android Developer’s Guide Getting Started with Arduino Microbridge
Getting Started First, make sure you have setup the development environments for Arduino and Android:</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Simple Analog Output</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-analog-output/</link>
      <pubDate>Wed, 02 May 2012 03:09:33 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-analog-output/</guid>
      <description>Simplest possible analog output with Android and Arduino. This article will discuss the bare minimal requirements for development of an Android USB digital output device, a controllable RGB LED. The goal is to demonstrate the easiest possible use of the technology. For additional background information on Android development, Arduino, and MicroBridge, check out these links:
Android Developer’s Guide Getting Started with Arduino Microbridge
Getting Started First, make sure you have setup the development environments for Arduino and Android:</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Simple Digital Input</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-digital-input/</link>
      <pubDate>Wed, 02 May 2012 03:04:45 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-digital-input/</guid>
      <description>Simplest possible digital input with the ADK. This article will discuss the bare minimal requirements for development of a basic USB digital input accessory. The goal is to demonstrate the easiest possible use of the technology. For additional background information on Android development, Arduino, and MicroBridge, check out these links:
Android Developer’s Guide Getting Started with Arduino Microbridge
Getting Started First, make sure you have setup the development environments for Arduino and Android:</description>
    </item>
    
    <item>
      <title>Android &#43; Arduino &#43; USB Host &#43; Simple Digital Output</title>
      <link>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-digital-output/</link>
      <pubDate>Wed, 02 May 2012 03:02:35 +0000</pubDate>
      
      <guid>https://mitchtech.github.io/hugo-mitchtech/android-arduino-usb-host-simple-digital-output/</guid>
      <description>Simplest possible digital output with Android and Arduino. This article will discuss the bare minimal requirements for development of an Android USB digital output device. The goal is to demonstrate the easiest possible use of the technology. For additional background information on Android development, Arduino, and MicroBridge, check out these links:
Android Developer’s Guide Getting Started with Arduino Microbridge
Getting Started First, make sure you have setup the development environments for Arduino and Android:</description>
    </item>
    
  </channel>
</rss>